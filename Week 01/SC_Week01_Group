{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kj2CpetkeU0-"
   },
   "source": [
    "<img src=\"https://news.illinois.edu/files/6367/543635/116641.jpg\" alt=\"University of Illinois\" width=\"250\"/>\n",
    "\n",
    "# HW: Stochastics\n",
    "\n",
    "### due 2023-01-23###\n",
    "\n",
    "HW submission by group (up to 4 people)\n",
    "* Yu-Ching Liao <ycliao3@illinois.edu>\n",
    "\n",
    "\n",
    "Note:  Anaconda Python <https://www.anaconda.com/distribution/> is a strong implementation of python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Z8vUR0i1eU1Y"
   },
   "source": [
    "## imports and graphics configurations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-01-18T16:42:35.451650Z",
     "start_time": "2023-01-18T16:42:32.276446Z"
    },
    "id": "RFQo5jJzeU1c"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n"
     ]
    }
   ],
   "source": [
    "import numpy\n",
    "import pandas\n",
    "import time\n",
    "import random\n",
    "import matplotlib\n",
    "#%matplotlib notebook\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats\n",
    "import matplotlib.offsetbox as offsetbox\n",
    "from matplotlib.ticker import StrMethodFormatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-01-18T16:42:36.925979Z",
     "start_time": "2023-01-18T16:42:36.923016Z"
    },
    "id": "Bg6T34ldeU1f"
   },
   "outputs": [],
   "source": [
    "#for some reason, this needs to be in a separate cell\n",
    "params={\n",
    "    \"font.size\":15,\n",
    "    \"lines.linewidth\":5,\n",
    "}\n",
    "plt.rcParams.update(params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_SayWQ8w5qvJ"
   },
   "source": [
    "# **Technology** #"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-Vu4xtqY5uIC"
   },
   "source": [
    "**Technology:** Compute $\\cos(k\\pi/10)$ for $k\\in \\{0,1,2,\\dots 20\\}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-01-18T16:47:04.608206Z",
     "start_time": "2023-01-18T16:47:04.604000Z"
    },
    "id": "4JmRDrAneU1l"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0, 0.9510565162951535, 0.8090169943749475, 0.5877852522924732, 0.30901699437494745, 6.123233995736766e-17, -0.30901699437494734, -0.587785252292473, -0.8090169943749473, -0.9510565162951535, -1.0, -0.9510565162951538, -0.8090169943749475, -0.5877852522924732, -0.30901699437494756, -1.8369701987210297e-16, 0.30901699437494723, 0.5877852522924729, 0.8090169943749473, 0.9510565162951535, 1.0]\n"
     ]
    }
   ],
   "source": [
    "π = numpy.pi\n",
    "cos = []\n",
    "def f(k): \n",
    "    return numpy.cos((π*k)/10)\n",
    "for i in range(21):\n",
    "    cos.append(f(i))\n",
    "print(cos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-01-18T16:47:08.120410Z",
     "start_time": "2023-01-18T16:47:07.996974Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cos)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
